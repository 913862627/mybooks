高举Domain Specification，应用函数式编程
   我在《小议领域模型Domain Model》讨论了service和object，以及关联逻辑(咳咳，该文中的一些观点我已修正，合适的时候放上来)。关联逻辑就是本文讨论的重点--specification
 
一、从DDD(Domain Driven Design)说起 
   这个Specification来自DDD，DDD有对specification分为三个类型 
   1. Validation 
   2. Selection 
   3. Building 
   不过在初看这个Specification的概念的时候，相信很多人都有一种似曾相识的感觉。我们日常开发中, 基于SRC原则写的那些xxxxProvider，xxxHelper，xxxChecker，而此外还有讨论了无数遍的Dao。不就是这个 specification嘛，换了一个马甲嘛。
 
二、应用Specification的好处： 
   现在就是我要高举specification的理由了。 
   1. 统一Domain model的相关支持逻辑，屏蔽了dao的存在。 
   请注意这个selection，即从repository中（通常是数据库）取出合适的对象列表。嗯，这个有意思了，原来总觉的dao在系统中的地位挺尴尬的， 
   由于先前的开发理念，Domain Model没有出现之前，我们是Transaction Script的开发模式，在ORM技术出现后，从TS转向Domain过程中，数据库访问转成dao层，大量的约束逻辑则散落在Service层中。因而开发系统，无论是那张系统结构（架构）图中（可以参考AppFuse），我们见贯了Dao层的存在，甚至我们习惯了Dao的存在。 
  
   而应用Specification则统一了这些概念，屏蔽了dao。dao做的最多的工作是查询逻辑，而查询逻辑也是一种逻辑嘛，和validation以及building都是支持Domain Model。这个specification算是给dao正名了。不过概念上正了名，如果仅仅在于此，恐怕大多数人都会说“嗯，不错，但是还是那么不实用 ”：要是按specification的做法，也就是把dao的下的代码分散出去，没有获得太多的好处,搞不好还给背上类型膨胀的罪名。别急DDD还有后手呢。 
  
   2. Specification引入了FP的开发思路 
   DDD可不是技穷于此，随后就提出了specification的closure。明眼人一看就知道这个closure来自FP。

回顾一下函数式编程基本特性先：
1. 闭包计算和高阶函数。
函数本身是first class对象，闭包是起函数作用并可以像对象一样操作的。高阶函数是可以接受一个函数为参数，并可以返回一个函数。
2. 延迟计算（lazy evaluation）
不是在函数绑定时计算，而是在求值时计算。
3. 递归的计算机制
4. 引用透明
同样的输入返回同样的结果，与上下文无关。
5. 没有副作用
赋值后不能更改，即是constant

    现在看看DDD三种specification的组合情况。 
   1. Validation的组合，DDD也给出了例子代码--看着就清爽！ 
   2. selection的组合，DDD并没有给出例子。也不幸就是这个selection比较难办，因为涉及到sql问题（这个问题往往又和性能连在一起）。刚好javaeye上有人开贴讨论组合sql的问题（http://forum.javaeye.com /viewtopic.php?t=21760） 
   我的想法是：从domain object的角度把selection的组合范围限制在where和order两个clause。
   这是最简单的，不考虑select和from，更不考虑join了。对于同一domain object其where和order的组合是简单的。DDD一书中的and，or和not操作是容易支持的。 
   接着要考虑支持join和union了。我估计应用系统中：普通的sql(不带join和union)，带join和union的sql以及更复杂的sql语句的比例是4：4：2。 
   不过join处理实在麻烦，我需要一些额外的信息。所幸从试验的代码看起来还是可以接受的。 
   那么对于那些确实复杂的sql查询怎么办（那剩下的2）？简单。单独写一个，我的观点是太复杂的东东复用的可能性也不大，日后出现类似的东东可以考虑用OO的继承的方式搞定，CO和OO本来就不是相互排斥的。
   除此外，还有和domain object无关的”分页”以及”top n”就可以独立提供specification来。
   (BTW：ajoo说不能光说不练，准备和buuawhl在sql的parser上作文章了。向偶像学习，抓紧试试看能不能作出来。)
  
   3. building的组合 
   这个看起来像curry，没有想好，暂时不讨论。 
  
   除此之外，系统中其它很多逻辑可以用FP的思想做，如业务规则（业务规则分类看《DSL：基于规则系统组织业务规则》）中的Computation，至于业务规则的Constraint和Action enabler可以直接参考validation。
BTW：ajoo在javaeye的blog给出了一些很好的例子。
 
三、其它问题 
   到目前为止，一些看起来都还不错。但是还有几个问题没有解决： 
   1. Selection的组合问题是否真的可以实现。 
   这个。。。尝试中 
   2. 难道在开发中要为每一种类型的specification单独写组合操作的处理函数。难道不能有一种统一的。 
   到目前为止,还不能。 对于各个specification，无论是参数还是返回对象的类型，以及组合的细节都不同，我们不得不独立处理。 
   2.1 首先是参数还是返回对象的类型，真的统一的话，就会变成这样：
interface Action{
  Object execute(Context ctxt);
}
interface Context{
  Object get(String key);
}

   很明显这不是我们要的 
   2.2 另外就是组合细节问题： 
   buuawhl在http://forum.javaeye.com/viewtopic.php?t=21533中列举了3个不同类型都是我们要考虑的 
   3. 其它 
   还没有想到，想到再说。






小议领域模型(Domain Model)
<<Domain Driven Design>> 和<< Patterns of Enterprise Application Architecture >>，令Domain 这个词很火，也引起了广泛争论。我这里也乱谈一把。

什么是领域模型(Domain Model )
   我以为Domain分两个含义：Domain Object和Domain Service。那么什么样的系统是面向Domain的系统，一个Domain Object和普通的符合OO原则的对象有什么区别；一个Domain Service和普通的Facade或者Manager对象有什么区别。
概念上，一个Domain Object和普通的符合OO原则的对象有声明区别：Domain Object是业务意义上，承载了业务数据（我据此认为所有Domain Object是有状态对象），从本质上说它直接来源于现实世界，没有技术层次上的考虑，“符合OO原则的对象”是用OO方法分析得到的，是基于计算机领域技术的（这样的对象可以是无状态的）；但反过来，符合OO的对象不一定反应DOMAIN 的OBJECT。

技术上，Domain Object是指那些包含需要被透明持久化的属性，以及相关业务逻辑（体现在Use Case中）的POJO。仔细观察旧的系统，发现Transaction Script还是Table Module操作都的是来自数据库（或者其它持久化通道）的数据，Transaction的业务逻辑是零星片断。而Table Module其操作的是同一类业务数据集合，包含明显的数据库痕迹。而一个Domain Object包含了这些需要被持久化的业务数据，同时还包含了与之相关所有业务操作，并且有自己的继承体系。Martin Fowler认为有了这些就可以称为是一个Domain Object，因此在其PoEAA中的ORM包含了一些不透明的持久化方案。我认为一个真正的Domain Object需要一个透明持久化。

Domain Service包含的商业逻辑包含了两部分：流程逻辑和控制逻辑。
1. 业务领域的流程逻辑（Business Process）。指一系列的业务行为，包括Domain Object的属性更新；Dao的创建、更新和删除操作以及对Domain Service中的包括Mail，网络等方法的访问。
2. 业务领域的控制逻辑（Business Rule）。A rule is a declarative statement that applies logic or computation to information values。Business Rule 1. 产生一些控制信息，限制或者触发某些行为的执行；2. 产生一些状态信息，提供给业务人员参考操作。A rule results either in the discovery of new information or a decision about taking action.。

而 Facade或者Manager是完全从技术上考虑的，尤其是Facade，通常处理如下逻辑：1. 与表现层通信工作，把表现层的平面数据（VO）转换为相关联的Domain对象，把Domain对象计算的结果转换成平面数据（VO）返回给表现层；2. 根据Use Case完成商业逻辑（面向事务）的调度，包括其业务关联的Domain Object和Domain Service调度，其可能调度了多个Domain Service。在简化的情况下，Facade有时和service可以等同。

如果把一个系统看作是一个Mechanical组件的话，那么Domain Object就是其Structure，相当于人的骨架；而流程逻辑就是Power，相当于骨架上的肌肉；那么控制逻辑就是Control，相当于肌肉中的神经。

Domain应用的可能 
JavaBean方案，采用SQL mapping,只映射字段，不支持关联关系的映射，没有多态。但随着ORM框架的发展，如hibernate，提供支持关联关系，继承多态的能力，Domain Object成为可能。

Cooperation Object：Domain Model之外
Domain Model描述了一个面向问题领域的对象组织结构，和行为逻辑。而同时系统还需要另一些称为协作对象的，来帮助我们处理特定的技术问题。

应用domain 的体系结构
      Domain Service  |           Cooperation Object
      Domain Object   | （包括了Dao在内的处理技术问题的辅助对象）

其它
Domain Model存在于系统的各个地方，不过在不同地方有不同的映射实现。在通常的开发过程中，该映射存在于文档和开发人员的脑海中的。当要向客户展示时，就面临一个映射的关系。比如要允许客户可以在线编辑页面呈现的显示元素，在规则定义里使用对象系统时。
另外Domain在不同视图下导致不同的内容。比如一个代理人Agent对象，在party的视图下只拥有基本属性，而在Sale channel视图下就保存了一些额外信息如：考核记录，优秀率等。




