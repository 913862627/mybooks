企业应用的分层

企业应用有其自身的特点，如。。。

为了适应，通常采用分层架构。分层也可以逐渐演变与细分

本文讨论。。。。演化，通常的做法。。。



* 企业应用的特点

企业级应用是软件的一种类型，与嵌入式系统，控制系统，电信系统，桌面应用等软件类型并列。
典型的企业应用如：预订系统，金融系统，物流补给系统等等
企业级应用：涉及大量复杂数据的显示、操作、存储，以及对这些数据进行处理的业务流程的自动化


大量复杂数据，处理“不合逻辑”的业务规则，
- 涉及到持久化数据，这些数据额能比应用本身的生命周期还要长。一般保存到数据库中
- 涉及到大量数据，尤其是近几年，“大数据”的处理已经成了一个热门话题
- 并发访问，很多用户同时访问，要保证数据的一致性
- 要开发大量的用户界面。如果一个系统只是提供API/WebService，那么幸福很多，
  可现在是，不仅要实现PC，还要实现移动设备（Mobile，Pad等）
- 集成的要求，与周围的其他企业应用集成，或者叫做整合更加时髦（主动的，无发起端的集成）。
  甚至为了方便，会要求企业应用符合企业架构（EA）的规划，作为企业应用的约束条件
- 业务逻辑的无逻辑，有很多特殊情况，无法改变，但最终会导致业务逻辑没有逻辑性。
- 变化：业务规则的变化，界面的变化，。。。。


* 企业应用的分类
- 大量用户——各种客户端环境，高并发、可伸缩，
- 用户少，业务逻辑复杂——UI也会很复杂，可能超出HTML的能力
- 用户少，功能简单



企业级应用：涉及大量复杂数据的显示、操作、存储，以及对这些数据进行处理的业务流程的自动化
例子：预订系统，金融系统，物流补给系统等等


需要整合
需要与企业架构相匹配


* 典型的分层
表现层	提供服务，显示信息，处理用户输入，http请求，命令行调用，api等
领域层	逻辑！核心部分
数据层	与数据库，消息系统，事务管理器及其他软件包通信


分层是软件架构最常用的技术。

分层的要点：上层调用下层，下层对上层一无所知
好处：
- 每个层是一个有机整体
- 只要定义好接口，每个层都可以替换具体的实现
- 减少依赖，某个层的改变只影响其相邻的层
- 一个下层可以为多个上层提供服务
坏处：
- 上层的修改可能会带来下面各层的修改（如，从界面到数据库）
- 层间转换影响性能
- 难以划分各层的边界和职责


* 企业应用中层次的演化
0. MainFrame时代，不分层
1. Client/Server：界面+数据库
   问题：业务逻辑放在界面层，或者作为存储过程放在数据库中，都不合适
2. C/A/S: 增加了领域逻辑层

3. 之后Web的兴起，Java的流行，企业应用开始变为多层架构。
   而且有越来越细分的趋势。

** 三个基本层次
| 层次 | 职责 |
|------+------|
|      |      |

1.    应用程序的分层体系结构：
1.1.       典型的三层结构：
1.1.1.       表示层：提供数据输入、检验与数据呈现的应用程序组件。(GUI、web页面)。就是与用户打交道的UI界面。
1.1.2.       业务层：提供商业逻辑服务的应用程序组件。
1.1.3.       数据层：负责存放和管理应用的持久性业务数据的持久化存储系统。(Database、XML)，最常见的持久化存储系统就是广泛使用的关系数据库。
1.2.       软件层的特征：
1.2.1.       每个层由一组相关的类或组件构成，共同完成特定的功能。
1.2.2.       层与层之间存在自上而下的依赖关系。即上层组件会访问下层组件的API，而下层组件不应该依赖上层组件。如：表现层依赖于业务逻辑层，而业务逻辑层依赖于数据层。
1.2.3.       每个层对上层公开API，封装实现细节。当某一层的实现发生改变，只要它的API不变，不会影响其他层的实现。
1.3.       软件分层的优点：
1.3.1.       伸缩性强：能支持更多的用户。
1.3.2.       可维护性高：修改软件的某一层的实现，不会影响其他层。
1.3.3.       可扩展性强：增加新功能更容易，每个层中都有扩展点，不会打破应用的整体框架。
1.3.4.       可重用性高：同一程序能满足多种需求。
1.3.5.       可管理性高：工作、管理模块化。
1.4.       四层结构：
由于数据存储方式多样，业务层不仅要负责业务逻辑的处理，还要跟数据层交互，提供对业务数据的CRUD操作(create、retrieve、update、delete)。为了把业务数据访问细节和业务逻辑分开，把业务数据访问作为单独的持久层。因此目前流行的软件分层结构是：
1.         表示层：
2.         业务层：业务逻辑层负责完成应用程序的逻辑功能，包括调用持久层完成实体对象的存取、安全检查，事务控制等。抽象出业务逻辑层的好处是将应用程序的逻辑功能从表示层中剥离，这样就能复用逻辑层的功能。此外，业务逻辑层也可以看作是对持久层的一个门面模式，简化表示层对这些逻辑功能的调用。
3.         持久层：封装了业务数据访问细节，为业务层提供了面向对象的API。持久层负责实现所有的数据访问功能，它将上层传入的数据写入到持久化存储系统中，并根据上层的要求读取或修改现有的数据。
4.         数据层：
1.5.       完善的持久层应该达到以下目标：
l 代码可重用性高，能够完成所有的数据访问操作。
l 具有相对独立性，当持久层的实现细节发生变化，不会影响上层的实现。

* 业务逻辑层的分离
  规则引擎


* TODO 事件驱动
* 分层与企业集成
展现层：portal
webservice，EAI，EDI，ETL，。。。。

《企业集成模式》

