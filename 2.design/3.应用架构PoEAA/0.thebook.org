
* TODO
1. 模式列表 P6-7
2. 关于性能 p21 (0.4)
3. 分层 P29-35

4. 

* 模式列表
| 层             | 模式                                  | 说明                                                                                     |
|----------------+---------------------------------------+------------------------------------------------------------------------------------------|
| 3.接口层       |                                       |                                                                                          |
| 3.1 UI         | 应用控制器Application Controller      | 处理屏幕导航和应用流程的集中控制点                                                       |
|                | 前端控制器Front Controller            | 处理Web站点中所有请求的控制器                                                            |
|                | 页控制器Page Controller               | 处理web站点中特定业务请求或动作的对象                                                    |
|                | 模型-视图-控制器Model-View-Controller | 将用户界面交互分割成三个不同的角色                                                       |
|                | 客户会话状态Client Session State      | 将会话状态存储于客户端                                                                   |
|                | 服务器会话状态Server Session State    | 将会话状态以序列化方式保存到服务器                                                       |
|                | 模板视图Template View                 | 通过在HTML页面中嵌入标记来将有关信息融入HTML                                             |
|                | 转换视图Transform View                | 逐条处理领域数据并将他们转换成HTML的一个视图                                             |
|                | 两步视图Two Step View                 | 通过两步将领域数据转换成HTML：首先形成某种逻辑页面，然后将逻辑页面转换成HTML             |
| 3.2 API        | 数据传输对象Data Transfer Object      | 在进程间进行数据传递的对象，目的是减少进程间方法调用的次数                               |
|                | 远程外观Remote Facade                 | 在细粒度对象上提供粗粒度的外观，以改进跨网络的有效性                                     |
| 2.领域层       | 事务脚本Transaction Script            | 通过过程来组织业务逻辑。其中，每个过程处理来自表现层的一个请求                           |
|                | 领域模型Domain Model                  | 即包含行为、又包含数据的领域的对象模型                                                   |
|                | 资源库Repository                      | 通过用来访问领域对象的一个类似集合的接口，在领域与数据映射层之间进行协调                 |
|                | 表模块                                |                                                                                          |
|                | 工作单元                              | 维护由业务事务所影响的对象列表，并协调更改的写出以及并发问题的解决                                                        |
| 2.1 业务服务层 | 服务层Service Layer                   | 通过一个服务层定义应用的边界，服务层建立一组可用操作并协调应用程序对每个操作请求的响应   |
|                | 服务桩Service Stub                    | 在测试过程中去除对有问题服务的依赖                                                       |
| 1. 持久层      | 活动记录（Active Record)              | 包装数据库表或视图中的行、封装数据库访问，并将业务逻辑加到该数据上的对象                 |
|                | 数据库会话状态Database Session State  | 将会话状态作为提交的数据存储于数据库中                                                   |
|                | 嵌入值Embedded Value                  | 将一个对象映射到另一个对象的表的多个域中                                                 |
|                | 查询对象Query Object                  | 表示数据库查询的对象                                                                     |
|                | 记录集Record Set                      | 列表数据的内存表示                                                                       |
|                | 行数据入口Row Data Gateway            | 在一个数据源中充当到一条记录的入口的对象。每条记录（数据库行）对应一个对象实例           |
|                | 序列化大对象Serialized LOB            | 通过序列化方法将一张对象图保存在一个大对象（LOB）中，然后将大对象存储在数据库的域中      |
|                | 表数据入口Table Data Gateway          | 充当到数据库表的入口的对象，一个实例处理表中的所有行                                     |
|                | 表模块Table Module                    | 通过一个实例处理数据库表或视图中所有行的业务逻辑                                         |
| 1.0 数据映射层 | 数据映射器Data Mapper                 | 由映射器组成一个层，映射器在对象和数据库之间移动数据，并保证数据之间、映射器之间相互独立 |
| 1.1 ORM        | 依赖映射Dependent Mapping             | 让一个类为一个子类进行数据库映射                                                         |
|                | 关联表映射Association Table Mapping   | 将关联存储为表的形式，并通过外键将之与相关的表连接起来                                   |
|                | 类表继承Class Table Inheritance       | 继承树中每个类对应一个表                                                                 |
|                | 具体表继承Concrete Table Inheritance  | 继承树中每个具体类对应一个表                                                             |
|                | 单表继承Single Table Inheritance      | 通过一个表来表示类的一个继承层次，表中各列对应不同类中的所有域                           |
|                | 外键映射Foreign Key Mapping           | 将对象间的一个关联映射成表间的一个外键引用                                               |
|                | 标识域Identity Field                  | 将数据库ID域保存到对象中，用来维护一个内存对象与一个数据库行之间的对应关系               |
|                |                                       |                                                                                          |
|                | 继承映射器Inheritance Mappers         | 组织数据库映射器的一种结构，能处理继承层次                                               |
|                | 元数据映射Metadata Mapping            | 在元数据中保存对象-关系映射的细节                                                        |



粗粒度锁Coarse-Grained Lock | 用一个锁将一组相关对象都锁上
入口Gateway，封装对外部系统或资源进行访问的对象
隐含锁 Implicit Lock, 允许框架或超层类型申请离线锁
超层类型Layer Supertype，某一层中充当所有类型的超类型的类型
延迟加载Lazy Load, 对象中不包含所有想要的数据，但知道如何获取这些数据

映射器Mapper，在两个独立对象间建立其通信的对象
货币Money 表示货币值(这个应该放到分析模式中）——你会数钱吗？
值对象Value Object，类似于金钱或数据范围的、小而简单的对象，其相等性不是基于ID的。


乐观离线锁Optimistic Offline Lock：通过检测冲突并回滚事务来防止并发业务事务间的冲突
悲观离线锁Pessimistic Offline Lock：通过每次只允许一个业务事务访问数据来防止并发业务事务间的冲突
插件Plugin：在配置阶段而不是在编译阶段连接类
注册表Registry：其他对象可以通过注册表找到公共对象或服务的一个知名对象

标识映射Identity Map ，通过将每个被加载对象放入一个映射中，确保每个对象都被加载且仅加载一次。当引用对象时使用映射来查找对象
分离接口Separated Interface:在一个与其实现分离的包中定义一个接口
特殊情况Special Case：为特定情况提供特殊行为的一个子类



